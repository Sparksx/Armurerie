{"name":"Armurerie","tagline":"","body":"Armurerie OS2\r\n=============\r\n\r\n(c) 2012 Sparks\r\nL'armurerie est gratuite\r\n\r\nIntroduction\r\n------------\r\n\r\n<p>La classe Armurerie est une classe utilisant plusieurs autres classes. Cette \r\ninter-connexion permet de créer un décodage des items et des statistiques \r\ndes personnages. La conception de cette classe permet une utilisation simple \r\net rapide.</p>\r\n\r\n<p>Un rendu personnalisable est généré automatiquement à l'endroit ou vous voulez l'afficher.</p>       \r\n\r\n\r\nFichiers principaux\r\n-------------------\r\n\r\nTout les fichiers se trouvent dans le dossier /armurerie/ son appellation \r\nseras donc omise ci-suivant.       \r\n\r\n* <code>/class/Armurerie.class.php</code>\tClass principal, affiche le rendu.      \r\n* <code>/class/BddManager.class.php</code>\tClass de connexion à la base de donnée       \r\n* <code>/class/Item.class.php</code>\t\tClass décodant les items du personnage       \r\n* <code>/class/Panoplie.class.php</code>\tClass décodant les panoplies        \r\n* <code>/class/Personnage.class.php</code>\tClass décodant les personnages        \r\n* <code>/class/Stats.class.php</code>\t\tClass décodant les statistiques (perso + item)        \r\n* <code>loadArmurerie.php</code>\t\tAppel des classes et des fichiers de configuration ; Ce fichier est à inclure dans la page ou vous utilisez l'armurerie                \r\n* <code>/params/config.php</code>\t\tFichier de configuration       \r\n\r\nInstallation\r\n------------\r\n\r\nL'installation de l'armurerie est simple :      \r\n\r\n1ere étape :       \r\n<p>Si votre table item template ne contient pas les gfx des items importez-y \r\nle fichier <code>/sql/updateItemTemplate.sql</code></p> \r\n             \r\n2ème étape :        \r\n<p>Placez le dossier <code>/armurerie/</code> et tout son contenu dans le ftp de votre site</p>        \r\n         \r\n3ème étape :        \r\n<p>Avant le début du code html ajoutez :          \r\n<code>include_once('path/to/armurerie/loadArmurerie.php');</code>  (path/to/armurerie est bien évidement à changer)</p>      \r\n\r\n4ème étape :        \r\n<p>Dans le fichier <code>loadArmurerie.php</code> modifiez la variable <code>$pathToDossierArmurerie</code> afin qu'elle contienne le chemin relatif vers le dossier de l'armurerie<br />\r\npar exemple : <code>$pathToDossierArmurerie = '../template/armurerie/';</code> si votre dossier armurerie se trouve dans le sous-dossier template</p>\r\n\r\nUtilisation\r\n-----------\r\n<pre>\r\n\t// Avant le début du code html    \r\n\t// Inclusion des class et configuration    \r\n\tinclude_once('path/to/armurerie/loadArmurerie.php');    \r\n\t// Une fois importé, l'armurerie est automatiquement instancié    \r\n\t// L'instance est stocké dans la variable superglobal $GLOBAL['armurerie']    \r\n\t// Cela permet de pouvoir l'utiliser n'importe ou dans votre code.\r\n\t// A l'intèrieur du code html    \r\n\t// Instanciation et affichage du rendu    \r\n\ttry {    \r\n\t\t// Chargement des personnages du compte 24    \r\n\t\t$GLOBALS['armurerie']->load(24, true);    \r\n\t\t// Chargement du personnages 361    \r\n\t\t$GLOBALS['armurerie']->load(361);    \r\n\t\t// Chargement du personnages 370, 376 et 245    \r\n\t\t$GLOBALS['armurerie']->load(array(370, 376, 245));    \r\n\t\t// Affiche de tout les personnages chargé.    \r\n\t\techo $GLOBALS['armurerie']->show();    \r\n\t} catch (Exception $e) {    \r\n\t\techo $e->__toString();    \r\n\t}\r\n</pre> \r\n\r\nAstuce :\r\n<pre>\r\n\t$GLOBALS['armurerie']->load(361);\r\n\techo $GLOBALS['armurerie']->show();\r\n</pre>\r\n      \r\nReviens à faire :       \r\n<pre>echo $GLOBALS['armurerie']->show(361);</pre>      \r\n\r\n\r\nContact\r\n-------\r\n\r\n<p>En cas d'erreur, de bugs, de questions, d'idée d'amélioration, postez une issue sur Github.</p>\r\n\r\nSparks\r\n","google":"UA-40510623-2","note":"Don't delete this file! It's used internally to help with page regeneration."}